name: CMake

on: [ push, pull_request ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  CCACHE_BASEDIR: ${{github.workspace}}
  CCACHE_DIR: ${{github.workspace}}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 6

jobs:
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-20.04, ubuntu-18.04 ]
        type: [ RelWithDebInfo, Debug ]
      fail-fast: false
    env:
      BUILD_TYPE: ${{ matrix.type }}
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Prepare ccache timestamp
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H;%M;%S" UTC)
          message("::set-output name=timestamp::${current_date}")

      - name: ccache cache files
        uses: actions/cache@v1.1.0
        with:
          path: .ccache
          key: ${{ matrix.os }}-${{ matrix.type }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.type }}-ccache-

      - name: Update Ubuntu package repos
        run: sudo apt-get update

      - name: Install Ubuntu Dependencies
        run: >
          sudo apt-get install
          build-essential
          git 
          ccache 
          python3-pip 
          libboost-test-dev 
          libboost-dev 
          libboost-filesystem-dev 
          libboost-program-options-dev 
          libboost-system-dev 
          libboost-thread-dev 
          libgtest-dev 
          google-mock 
          libcairo2-dev 
          libglib2.0-dev 
          libgtk-3-dev 
          libtiff5-dev 
          pkg-config 
          doxygen 
          graphviz 
          libc6-dev

      - name: Install conan
        run: |
          python3 -m pip install --upgrade pip setuptools
          python3 -m pip install --no-warn-script-location conan

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=g++-10 -DCMAKE_C_COMPILER=gcc-10

      - name: Load enviroment
        run: source ${{github.workspace}}/build/ENVIRONMENT

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: xvfb-run ctest -C ${{env.BUILD_TYPE}}

  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Log version numbers
        run: >
          echo CPP: && git describe --tags && echo Tags: && git tag -l &&
          echo "" &&
          cd scroom && echo Scroom: && git describe && echo Tags: && git tag -l

      - name: Install Pacman packages
        run: >
          build_scripts\github\msysdo pacman --sync --noconfirm --needed
          git
          make
          mingw-w64-x86_64-boost
          mingw-w64-x86_64-dlfcn
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-glade
          mingw-w64-x86_64-gtk3
          mingw-w64-x86_64-toolchain
          zip
          mingw64/mingw-w64-x86_64-cmake
          mingw64/mingw-w64-x86_64-python
          mingw64/mingw-w64-x86_64-python-pip

      - name: Install conan
        run: >
          build_scripts\github\mingwdo
          pip install --user conan

      - name: Build
        run: >
          build_scripts\github\mingwdo
          build_scripts/github/build-cmake-mingw

      - uses: actions/upload-artifact@v2
        with:
          path: ScroomCPPPlugins-*Source.tar.gz

      - uses: actions/upload-artifact@v2
        with:
          path: scroom-win-*.zip
